<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <!-- Disable the global usings -->
    <ImplicitUsings>disable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>

    <!-- For Csc -->
    <NoStdLib>true</NoStdLib>
    <NoConfig>true</NoConfig>
    <RuntimeMetadataVersion>v4.0.30319</RuntimeMetadataVersion>
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
    <GenerateTargetFrameworkAttribute>false</GenerateTargetFrameworkAttribute>

    <!-- For ILC -->
    <NativeLib>Shared</NativeLib>
    <NativeDebugSymbols>false</NativeDebugSymbols>
    <IlcDehydrate>false</IlcDehydrate>
    <IlcDisableReflection>true</IlcDisableReflection>
    <IlcGenerateMapFile>true</IlcGenerateMapFile>
    <IlcGenerateStackTraceData>false</IlcGenerateStackTraceData>
    <IlcOptimizationPreference>Size</IlcOptimizationPreference>
    <IlcSystemModule>NativeLibrary</IlcSystemModule>
    <EntryPointSymbol>DllMain</EntryPointSymbol>
    <PublishAot>true</PublishAot>
  </PropertyGroup>
  
  <ItemGroup>
    <RuntimeExportDef Include="Add"/>
    <RuntimeExportDef Include="OnLoaded"/>
    <RuntimeExportDef Include="OnUnloaded"/>
  </ItemGroup>

  <ItemGroup>
    <DirectPInvoke Include="user32" />
    <NativeLibrary Include="user32.lib" />
  </ItemGroup>

  <Import Project="ProjectReference.targets" Sdk="Microsoft.DotNet.CMake.Sdk" />

  <ItemGroup>
    <NativeProjectReference Include="..\CustomDllMain\CMakeLists.txt" CMakeProject="..\CustomDllMain\CustomDllMain.proj" BuildNative="true"/>
  </ItemGroup>

  <Target Name="AddNativeLibraryReferences" AfterTargets="ConsolidateNativeProjectReference">
    <ItemGroup>
      <DirectPInvoke Include="$(OutputPath)\**\CustomDllMain" />
      <NativeLibrary Include="$(OutputPath)\**\CustomDllMain.lib" />
    </ItemGroup>
  </Target>

  <!-- The project file pretends this is .NET, but it's not .NET. Remove all assembly references the .NET SDK added. -->
  <Target Name="CustomizeReferences" BeforeTargets="BeforeCompile" AfterTargets="FindReferenceAssembliesForReferences">
    <ItemGroup>
      <ReferencePathWithRefAssemblies Remove="@(ReferencePathWithRefAssemblies)" />
      <ReferencePath Remove="@(ReferencePath)" />
    </ItemGroup>
  </Target>

  <!-- The AOT compiler would want to mirror these as AppContext switches. Prevent that. -->
  <Target Name="RemoveHostConfigurationOptions" BeforeTargets="WriteIlcRspFileForCompilation">
    <ItemGroup>
      <RuntimeHostConfigurationOption Remove="@(RuntimeHostConfigurationOption)" />
    </ItemGroup>
  </Target>

  <!-- Remove the default assembly reference from ILC -->
  <Target Name="RemoveIlcReferences" BeforeTargets="WriteIlcRspFileForCompilation">
    <ItemGroup>
      <IlcReference Remove="@(IlcReference)" />
      <_TrimmerFeatureSettings Remove="@(_TrimmerFeatureSettings)" />
    </ItemGroup>
  </Target>

  <!-- We removed 'UnmanagedCallersOnly' (because it didn't work),
       so we need to rewrite the export definition file. (Before link) -->
  <Target Name="WriteCustomExportDef" BeforeTargets="LinkNative">
    <ItemGroup>
      <CustomExportDef Include="EXPORTS"/>
      <CustomExportDef Include="@(RuntimeExportDef->' %(Identity)')"/>
    </ItemGroup>
    <WriteLinesToFile File="$(ExportsFile)" Lines="@(CustomExportDef)" Overwrite="true" WriteOnlyWhenDifferent="true" />
  </Target>

  <!-- Rewrite the rsp file, because the '-resilient' arg cannot be removed... -->
  <Target Name="RewriteRspFile" AfterTargets="WriteIlcRspFileForCompilation">
    <ItemGroup>
      <IlcArg Remove="@(IlcArg)" Condition="'%(Identity)' == '--resilient'"/>
    </ItemGroup>
    <WriteLinesToFile File="%(ManagedBinary.IlcRspFile)" Lines="@(IlcArg)" Overwrite="true" WriteOnlyWhenDifferent="true" />
  </Target>
  
  <!-- Because there are a lot of redundant arguments generated in the
       'SetupOSSpecificProps' target. So we need to make a backup of some
       of the arguments, delete the original arguments, and then restore them.
    -->
  <Target Name="BackupLinkerArg" BeforeTargets="SetupOSSpecificProps">
    <ItemGroup>
      <BackupLinkerArg Include="@(LinkerArg)"/>
      <BackupDirectPInvoke Include="@(DirectPInvoke)"/>
      <BackupNativeLibrary Include="@(NativeLibrary)"/>
    </ItemGroup>
  </Target>
  
  <!-- Copy from the 'Microsoft.NETCore.Native.Windows.targets', and the link arguments are simplified. -->
  <Target Name="CustomizeLinkerArg" AfterTargets="SetupOSSpecificProps" DependsOnTargets="$(IlcDynamicBuildPropertyDependencies)">
    <ItemGroup>
      <LinkerArg Remove="@(LinkerArg)" />
      <LinkerArg Include="@(BackupLinkerArg)"/>
      <DirectPInvoke Remove="@(DirectPInvoke)" />
      <DirectPInvoke Include="@(BackupDirectPInvoke)"/>
      <NativeLibrary Remove="@(NativeLibrary)" />
      <NativeLibrary Include="@(BackupNativeLibrary)"/>
    </ItemGroup>

    <ItemGroup>
      <LinkerArg Condition="'$(NativeLib)' == 'Shared'" Include="/DLL" />
      <LinkerArg Include="@(NativeLibrary->'&quot;%(Identity)&quot;')" />
      <LinkerArg Include="/NOLOGO /MANIFEST:NO" />
      <LinkerArg Condition="$(NativeDebugSymbols) == 'true'" Include="/DEBUG" />
      <!-- The runtime is not compatible with jump stubs inserted by incremental linking. --> 
      <LinkerArg Include="/INCREMENTAL:NO" />
      <LinkerArg Condition="'$(LinkerSubsystem)' != ''" Include="/SUBSYSTEM:$(LinkerSubsystem)" />
      <LinkerArg Condition="'$(OutputType)' == 'WinExe' or '$(OutputType)' == 'Exe'" Include="/ENTRY:$(EntryPointSymbol) /NOEXP /NOIMPLIB" />
      <LinkerArg Condition="'$(OutputType)' != 'WinExe' and '$(OutputType)' != 'Exe' and '$(EntryPointSymbol)' != ''" Include="/ENTRY:$(EntryPointSymbol) /NOEXP /NOIMPLIB" />
      <LinkerArg Condition="'$(ControlFlowGuard)' == 'Guard'" Include="/guard:cf" />
    </ItemGroup>

    <ItemGroup Condition="'$(Configuration)' != 'Debug'">
      <LinkerArg Include="/OPT:REF" />
      <LinkerArg Include="/OPT:ICF" />
    </ItemGroup>
  </Target>
</Project>
